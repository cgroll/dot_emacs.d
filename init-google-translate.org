#+TITLE: google-translate initialization

Define default languages:
#+BEGIN_SRC emacs-lisp
  (setq google-translate-default-source-language "en")
  (setq google-translate-default-target-language "de")
#+END_SRC

Define function for vocabulary exportation.
#+BEGIN_SRC emacs-lisp
  (defun cg/translate-and-export ()
     "google translation of english word and exportation to vocabulary
  list"
     (interactive)
  
     ;; get sentence and word
     (let (word sentence beg_sent end_sent)
        (setq word (word-at-point))
        (save-excursion
           (backward-sentence)
           (backward-char)
           (setq beg_sent (point))
           (forward-sentence)
           (setq end_sent (point))
           (setq sentence (substring (buffer-string) beg_sent end_sent))
           )
  
        (save-excursion
           ;; translate word
           (google-translate-at-point)
  
           ;; get main translation results
           (switch-to-buffer "*Google Translate*")
           (goto-char (search-forward "1"))
           (push-mark)
           (next-line 3)
           (move-end-of-line nil)
           (kill-ring-save (mark) (point))
  
           ;; refine translation results
           (switch-to-buffer "g-transl-refine")
           (yank)
           (exchange-point-and-mark)
           (org-table-convert-region (point) (mark))
           (org-table-delete-column)
           (org-table-cut-region (+ (point-min) 1) (- (point-max) 2))
           (kill-buffer "g-transl-refine")
           
           ;; insert into vocabulary
           (find-file "~/org/vocabulary.org")
           (end-of-buffer)
           (search-backward "|")
           (forward-char)
           (org-table-insert-hline)
           (next-line)
           (org-table-next-field)
           (insert word)
           (org-table-next-field)
           (org-table-paste-rectangle)
           (org-table-next-field)
           
           ;; ;; refine sentence format
           (switch-to-buffer "g-transl-refine")
           (beginning-of-buffer)
           (set-mark (point))
           (set-fill-column 40)
           (insert sentence)
           (exchange-point-and-mark)
           (fill-paragraph nil)
           (org-table-convert-region (point-min) (point-max) '(16))
           (org-table-cut-region (+ (point-min) 1) (- (point-max) 2))
           (switch-to-buffer "vocabulary.org")
  
           (org-table-paste-rectangle)
           (kill-buffer "g-transl-refine")
           )
        )
     )
#+END_SRC
Implementation of export function for org-drill.
#+BEGIN_SRC emacs-lisp
  (defun cg/translate-and-export-2 ()
     "google translation of english word and exportation to org-drill
  format"
     (interactive)
  
     ;; get sentence and word
     (let (word sentence word_class beg_sent end_sent vocab_entry)
        (setq word (word-at-point))
  
        (save-excursion
           ;; get sentence
           (save-excursion
              (backward-sentence)
              (backward-char)
              (setq beg_sent (point))
              (forward-sentence)
              (setq end_sent (point))
              (setq sentence (substring (buffer-string) beg_sent end_sent))
              )
  
           (save-excursion
              ;; translate word
              (google-translate-at-point)
  
              ;; get word class
              (switch-to-buffer-other-window "*Google Translate*")
              (goto-line 5)
              (let (beg_line end_line)
                 (setq beg_line (point))
                 (forward-sexp)
                 (setq end_line (- (point) 1))
                 (setq word_class
                    (substring (buffer-string) (- beg_line 1) end_line)  
                    )
                 )
  
              ;; get main translation results
              (goto-line 6)
              (beginning-of-line)
              (search-forward "1")
              (beginning-of-line)
              (push-mark)
              (next-line 3)
              (move-end-of-line nil)
              (kill-ring-save (mark) (point))
  
              ;; insert word class and word into template
              (find-file "~/Dropbox/personal_data/vocab_template.org")
              (show-all)
              (beginning-of-buffer)
              (forward-char 3)
              (kill-sexp)
              (insert word_class)
              (outline-next-heading)
              (next-line)
              (insert word)
              (outline-next-heading)
              (next-line)
  
              ;; insert translation
              (yank 2)
              (outline-next-heading)
              (next-line)
  
              ;; insert context
              (insert sentence)
              (fill-paragraph nil)
  
              ;; move complete content to vocabulary file
              (setq vocab_entry (buffer-string))
              (revert-buffer t t t)
              (find-file "~/org/vocabulary.org")
              (goto-char (buffer-end 1))
              (newline)
              (insert vocab_entry)
              (save-buffer)
              (kill-buffer "vocab_template.org")
              (kill-buffer "*Google Translate*")
              )
           )
        )
     )
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun cg/translate-and-export-3 ()
     "google translation of english word and exportation to org-drill
  format"
     (interactive)
  
     (display-buffer "vocabulary.org")
     
     ;; get sentence and word
     (let (word sentence word_class beg_sent end_sent vocab_entry answer
     syns last_three counter beg_line end_line multiple_words)
        (setq multiple_words mark-active)
        (if multiple_words
           (setq word (buffer-substring-no-properties (point) (mark)))
           (setq word (word-at-point))
           )
  
        (save-excursion
           ;; get sentence
           (save-excursion
              (backward-sentence)
              (backward-char)
              (setq beg_sent (point))
              (forward-sentence)
              (setq end_sent (point))
              (setq sentence (buffer-substring-no-properties beg_sent end_sent))
              )
  
           (save-excursion
              ;; translate word
              (google-translate-at-point)
  
              ;; get word class
              (switch-to-buffer-other-window "*Google Translate*")
              (if (not multiple_words)
                 (progn
                    (goto-line 5)
                    (let (beg_line end_line)
                       (setq beg_line (point))
                       (forward-sexp)
                       (setq end_line (- (point) 1))
                       (setq word_class
                          (buffer-substring-no-properties (- beg_line 0) (+
                                                                            end_line 1))  
                          )
                       )
                    )
                 (setq word_class "unknown")
                 )
  
              ;; get main translation results
              (if multiple_words
                 (goto-line 5)
                 (goto-line 6)
                 )
              (beginning-of-line)
              (condition-case ex
                 (search-forward "1")
                 ('error (goto-char (- (point-max) 1)))
                 )
              (beginning-of-line)
              (push-mark)
              (condition-case ex
                 (next-line 3)
                 ('error (goto-char (- (point-max) 1)))
                 )
              (move-end-of-line 1)
              (kill-ring-save (mark) (point))
  
              ;; insert word class and word into template
              (find-file "~/Dropbox/personal_data/vocab_template.org")
              (show-all)
              (beginning-of-buffer)
              (forward-char 3)
              (kill-sexp)
              (insert word_class)
              (outline-next-heading)
              (next-line)
              (insert word)
              (outline-next-heading)
              (next-line)
  
              ;; insert translation
              (yank 2)
              (outline-next-heading)
              (next-line)
  
              ;; insert context
              (insert sentence)
              (fill-paragraph nil)
  
              ;; move complete content to vocabulary file
              (setq vocab_entry (buffer-string))
              (revert-buffer t t t)
              (find-file "~/org/vocabulary.org")
              (goto-char (buffer-end 1))
              (newline)
              (insert vocab_entry)
  
              ;; find synonyms for word
              (setq syns "| ")
              (setq answer (thesaurus-get-synonyms word))
              (setq counter 3)
              (while (and answer (> counter 0))     ; as long as answer
                                          ; is list of
                 (print counter)
                                          ; list
                 ;; (print syns)
                 (if (atom (car answer))
                    (progn
                       (if (string= (car (cdr answer)) "syn")
                          (setq syns 
                             (concat syns (car (cdr (cdr answer)))))
                          )
                       )
                    ;; list of lists
                    (if (string= (car (cdr (car answer))) "syn")
                       (progn
                          (setq syns
                             (concat syns (car (cdr (cdr
                                                       (car
                                                          answer)))) ", ")
                             )
                          (setq counter (- counter 1))
                          )
                       )
                    )
                 (setq answer (cdr answer))
                 )
  
              ;; find word of interest in sentence
              (goto-char (buffer-end 1))
              (search-backward word)
              (kill-forward-chars (+ (string-width word) 0))
              (insert (concat "[" word syns"]"))
              
              ;; delete last "," if necessary
              ;; (setq last_three (substring (buffer-string)
              ;;                     (- (point) 4) (- (point) 1)))
              ;; (print "last three are")
              ;; (print last_three)
              ;; (string= last_three ", ]")
              
              (setq beg_line (- (point) 3))
              (setq end_line (- (point) 0))
              ;; (print (buffer-substring-no-properties
              ;;                     beg_line end_line))
              
              (if (string= (buffer-substring-no-properties
                                  beg_line end_line) ", ]")
                 (progn 
                    ;; (message "something gets deleted")
                    (backward-char 1)
                    (backward-delete-char 2)))
              (fill-paragraph nil)
              (end-of-buffer)
              ;; (recenter-top-bottom 2)
              
              (save-buffer)
              (kill-buffer "vocab_template.org")
              (switch-to-buffer "*Google Translate*")
              (delete-window)
  
              (other-window 1)
              (end-of-buffer)
              (recenter -1)
              (other-window -1)
  
              ;(kill-buffer "*Google Translate*")
              ; (other-window -1)
              )
           )
        )
     )
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (global-unset-key "\C-t")
  (global-set-key (kbd "C-t j") 'cg/translate-and-export-3)
  (global-set-key (kbd "C-t l")
     'google-translate-query-translate-reverse)
  (global-set-key (kbd "C-t L") 'google-translate-query-translate)
  (global-set-key (kbd "C-t K") 'google-translate-at-point)
  (global-set-key (kbd "C-t k") 'google-translate-at-point-reverse)
#+END_SRC


;; ;; added for translate-and-export macro
;; (fset 'translate-and-export
;;    [?\M-f ?\M-b ?\C-  ?\M-f ?\M-w ?\M-e ?\C-  ?\M-x ?b ?a ?c ?k ?w ?a ?r ?d ?- ?s ?e ?n ?t ?e ?n ?c ?e return ?\M-x ?s ?e ?a ?r ?c ?h ?- ?f ?o ?r ?w ?a ?r ?d ?- ?r ?e ?g ?e ?x ?p return ?\[ ?a ?: backspace ?- ?u backspace ?z ?| ?A ?- ?Z return ?\C-b ?\M-w ?\C-x ?\C-f ?~ ?/ ?o ?r ?g ?/ ?r ?s ?s ?/ ?v ?o ?c ?a ?b ?u ?l ?a ?r ?y ?. ?o ?r ?g return ?\M-> ?\C-r ?| ?\C-m ?\C-f ?\C-  ?\M-> ?\C-d return ?| ?\C-y ?\M-y tab ?\C-x ?r ?m ?v ?o ?c ?a ?b ?_ ?m ?e ?a ?n ?i ?n ?g return tab ?\C-x ?r ?m ?v ?o ?c ?a ?b ?_ ?s ?e ?n ?t ?e ?n ?c ?e return ?\M-x ?s ?e ?t ?- ?v ?a ?r ?i ?a ?b ?l ?e return ?f ?i ?l ?l ?- ?c ?o ?l ?u ?m ?n return ?5 ?0 return ?\C-e return return ?\C-x ?r ?m ?v ?o ?c ?a ?b ?_ ?t ?a ?b ?l ?e ?e ?n ?d return ?\C-y ?\C-u ?- ?1 ?\M-y ?\C-  ?\C-x ?r ?b ?v ?o ?c ?a ?b ?_ ?t ?a ?b ?l ?e ?e ?n ?d return ?\M-q ?\C-  ?\C-x ?r ?b ?v ?o ?c ?a ?b ?_ ?t ?a ?b ?l ?e ?e ?n ?d return ?\C-u ?1 ?0 ?\C-u ?\C-c ?| ?\C-  ?\C-  ?\C-p return ?\C-x ?r ?m ?v ?o ?c ?a ?b ?_ ?t ?a ?b ?l ?e ?e ?n ?d return ?\C-u ?\C-  ?\C-  ?\M-> ?\C-r ?| ?\C-b ?\C-c ?\C-x ?\C-w ?\C-x ?r ?b ?v ?o ?c ?a ?b ?_ ?t ?a ?b ?l ?e ?e ?n ?d return ?\C-  ?\M-> ?\C-d ?\C-x ?r ?b ?v ?o ?c ?a ?b ?_ ?s ?e ?n ?t ?e ?n ?c ?e return ?\C-c ?\C-x ?\C-y ?\M-x ?g ?o ?o ?g ?l ?e ?- ?t ?r ?a ?n ?s ?l ?a ?t ?e return ?\C-y ?\M-y return ?\C-x ?o ?\C-n ?\C-n ?\C-n ?\C-n ?\C-  ?\C-e ?\M-w ?\C-x ?o ?\C-x ?r ?b ?v ?o ?c ?a ?b ?_ ?m ?e ?a ?i ?n backspace backspace ?n ?i ?n ?g return ?\C-y return ?\C-x ?o ?\C-n ?\C-a ?\C-  ?\C-e ?\M-w ?\C-x ?o ?\C-y return ?\C-x ?o ?\C-n ?\C-a ?\C-  ?\C-e ?\M-w ?\C-x ?o ?\C-y return ?\C-x ?o ?\C-n ?\C-a ?\C-  ?\C-e ?\M-w ?\C-x ?o ?\C-y ?\C-c ?\C-c ?\M-> ?\M-x ?s ?e ?a ?r ?c ?h ?- ?b ?a ?c ?k ?w ?a ?r ?d ?- ?r ?e ?g ?e ?x ?p return ?\[ ?a ?- ?z ?| ?A ?- ?Z return ?\C-e ?\M-> ?\C-r ?| ?\C-m ?\C-c ?- ?\C-x ?b return])

;; (global-set-key "\C-xt" 'translate-and-export)
