
;; added for w3m				

 ;; (if (= emacs-major-version 23)
 ;;    (progn
 ;;      (add-to-list 'load-path "~/efficient_workspace/emacs_extensions/emacs-w3m-1.4.4/share/emacs/site-lisp/w3m")
 ;;      (require 'w3m-load))
 ;;  (require 'w3m))
(add-to-list 'load-path "/usr/local/libexec/w3m")
(add-to-list 'load-path "/usr/share/emacs/site-lisp/w3m")
(require 'w3m-load)
(require 'mime-w3m)			

;; set w3m as standard browser
#+BEGIN_SRC emacs-lisp
   ;; (setq browse-url-browser-function 'browse-url-chrome)
   ;; (setq w3m-fill-column 69)
#+END_SRC


;; allow easy toggling between w3m and normal buffers
;; [[http://sachachua.com/blog/category/wickedcoolemacs/][Taken from Sacha Chua]]
#+BEGIN_SRC emacs-lisp
(defun wicked/toggle-w3m ()
  "Switch to a w3m buffer or return to the previous buffer."
  (interactive)
  (if (derived-mode-p 'w3m-mode)
      ;; Currently in a w3m buffer
      ;; Bury buffers until you reach a non-w3m one
      (while (derived-mode-p 'w3m-mode)
	(bury-buffer))
    ;; Not in w3m
    ;; Find the first w3m buffer
    (let ((list (buffer-list)))
      (while list
	(if (with-current-buffer (car list)
	      (derived-mode-p 'w3m-mode))
	    (progn
	      (switch-to-buffer (car list))
	      (setq list nil))
	  (setq list (cdr list))))
      (unless (derived-mode-p 'w3m-mode)
	(call-interactively 'w3m)))))
(global-set-key (kbd "<f7>") 'wicked/toggle-w3m)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun wicked/w3m-open-current-page-in-firefox ()
  "Open the current URL in Mozilla Firefox."
  (interactive)
  (browse-url-firefox w3m-current-url)) ;; (1)

(bind-key* "C-t f" 'wicked/w3m-open-current-page-in-firefox)

(defun wicked/w3m-open-link-or-image-in-firefox ()
  "Open the current link or image in Firefox."
  (interactive)
  (browse-url-firefox (or (w3m-anchor) ;; (2)
                          (w3m-image)))) ;; (3)
(bind-key* "C-t C-f" 'wicked/w3m-open-link-or-image-in-firefox)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle no
  (define-key w3m-mode-map (kbd "M-n") 'forward-word)
#+END_SRC





;; set delete-by-moving-to-trash to t
;; C-M-f
;; M-s w isearch forward word
;; C-s C-w add word after point to isearch
;; C-x C-x jump between beginning and ending of yanked text
;; M-r move to top, center and bottom of screen
;; c-subword-mode for words like ThisIsWordWithSubwordCapitalisation
;; M-s o list occurrences in new buffer
;; M-x re-builder: interactively build regular expression

;; ;; (load "/usr/share/emacs/23.3/site-lisp/ess/ess-site")
;; (load "~/ESS/lisp/ess-site.el")
;; (require 'ess-site)
;; (setq inferior-julia-program-name "~/julia/julia-release-basic")
