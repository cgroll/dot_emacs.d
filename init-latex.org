#+TITLE: Initialization of latex and alike

Load auctex and preview latex.
#+BEGIN_SRC emacs-lisp
  (load "auctex.el" nil t t)
  (load "preview-latex.el" nil t t)
#+END_SRC

Use article class as standard, and define, how headers will be
  translated into sections.
#+BEGIN_SRC emacs-lisp
  (require 'org-latex)
  (unless (boundp 'org-export-latex-classes)
     (setq org-export-latex-classes nil))
  (add-to-list 'org-export-latex-classes
     '("article"
         "\\documentclass{article}"
         ("\\section{%s}" . "\\section*{%s}")
         ("\\subsection{%s}" . "\\subsection*{%s}")
         ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
         ("\\paragraph{%s}" . "\\paragraph*{%s}")
         ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
  
#+END_SRC

* live display
In order to display minor visual help, we enable UTF-8 displaying for
greek letter and subindices and exponents. However, I tend to use
underscores frequently in variable and file names, so that
underscores will be related to subindices only in conjunction with
curly brackets.
#+BEGIN_SRC emacs-lisp
  (setq org-pretty-entities t)
  (setq org-export-with-sub-superscripts "{}")
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq org-export-with-LaTeX-fragments t)
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (setq preview-image-type 'dvipng)
  (setq preview-scale-function 1.5)
#+END_SRC

* key bindings
#+BEGIN_SRC emacs-lisp
  (defun cg/insert_underscore ()
     "insert underscore with opening curly bracket for latex"
     (interactive)
     (insert "_{"))
  (defun cg/insert_exponent ()
     "insert exponent with opening curly bracket for latex"
     (interactive)
     (insert "^{"))
  
  (global-set-key (kbd "C--") 'cg/insert_exponent)
  (global-set-key (kbd "M--") 'cg/insert_underscore)
#+END_SRC

** greek letters
#+BEGIN_SRC emacs-lisp
  ;(defun cg/set_math_abbrev_prefix ()
  ;   "set LaTeX-math-abbrev-prefix"
  ;   (interactive)
  ;   (setq LaTex-math-abbrev-prefix "M-g"))
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
  ;(add-hook 'LaTeX-mode-hook 'cg/set_math_abbrev_prefix)
#+END_SRC
Set math prefix.
#+BEGIN_SRC emacs-lisp
(custom-set-variables
 '(LaTeX-math-abbrev-prefix "M-g"))
#+END_SRC

* bibtex
#+BEGIN_SRC emacs-lisp  
  (defun cg/capture-bibtex ()
     "function shall create org-entry for literature document, thereby
         optionally renaming pdf file and creating bibtext entry"
     (interactive)
     (let ((mylist (list "emacs-kill-ring" "clipboard" "file"))
             bibtex-type bibtex-entry
             (tmpbuf (get-buffer-create "*captured-bibtex-entry"))
             )
        (setq bibtex-type (ido-completing-read "Where is the bibtex
     entry? " mylist))
        (cond
           
           ((string= bibtex-type "file")  ; in case I want to choose a
                                          ; file
              (ido-find-file-other-window) ; copy bibtex text 
              (setq bibtex-entry (buffer-string))
              )
           
           ((string= bibtex-type "emacs-kill-ring") ; in case bibtex is
                                          ; given via emacs-kill-ring 
              (setq bibtex-entry (substring-no-properties (car kill-ring)))
              )
           
           ((string= bibtex-type "clipboard") ; get entry from clipboard
              (with-current-buffer tmpbuf
                 (delete-region (point-min) (point-max))
                 (goto-char (point-min))
                 (clipboard-yank)
                 (setq bibtex-entry (buffer-string))
                 )
              )
           )
        ;; prepend two newlines
        (setq bibtex-entry (concat "\n\n" bibtex-entry))
        
        ;; now append bibtex-entry to refs_test.bib file
        (write-region bibtex-entry nil "~/literature/management/refs_test.bib" t)
  
        ;; get location 
        (setq location (read-file-name
                          "Where is associated document file?"
        "~/Downloads/" nil 'confirm))
        (if (file-exists-p location)
           ;; mv file to bibliography with new title
  
           ;; create location-string with link properties
  
           ;; location string has to be plugged into template
           
           
           ;; change name of file according to title
           (progn
              (org-capture)
  
              )
  
           
           ;; get title string
  
        
  
           )
        
        ;; (with-temp-buffer
        ;;    (insert bibtex-entry)
        ;;    (write-region (point-min)
        ;;       (point-max)
        ;;       "~/literature/management/refs_test.bib") )
        )
     )
     
  
  (global-set-key (kbd "C-5") 'cg/capture-bibtex)
  
  (defun cg/parse-bibtex-and-make-local-variable ()
     "function shall parse bibtex at point and keep alist as local
  variable"
     (interactive)
     (beginning-of-buffer)
     (search-forward "@")
     (backward-char)
     (setq current-bibtex-entry-alist-of-fields (bibtex-parse-entry))
     )
  
  (global-set-key (kbd "C-4") 'cg/parse-bibtex-and-make-local-variable)
#+END_SRC
  
#+BEGIN_SRC emacs-lisp
    (require 'reftex)
    (add-hook 'LaTeX-mode-hook 'turn-on-reftex)   ; with AUCTeX LaTeX mode
    (add-hook 'latex-mode-hook 'turn-on-reftex)   ; with Emacs latex mode
#+END_SRC


#+BEGIN_SRC emacs-lisp
  (defun org-mode-reftex-setup ()
    (load-library "reftex")
    (and (buffer-file-name)
         (file-exists-p (buffer-file-name))
         (reftex-parse-all))
    (define-key org-mode-map (kbd "C-c (") 'reftex-citation))
  (add-hook 'org-mode-hook 'org-mode-reftex-setup)
#+END_SRC


#+BEGIN_SRC emacs-lisp
  (setq org-latex-to-pdf-process '("pdflatex -interaction nonstopmode %b"
                                   "/usr/bin/bibtex %b"
                                   "pdflatex -interaction nonstopmode %b"
                                   "pdflatex -interaction nonstopmode %b"))
#+END_SRC

** Keybindings
Change key bindings: C-c C-p does replace value of current field with
value of same field of next entry. Something that doesn't make any
sense in my alphabetically order bibtex setup. However, moving
exactly from one entry to the next is not defined, which is something
I find a very natural operation. Hence, this will be changed.
#+BEGIN_SRC emacs-lisp
(require 'bibtex)
  (defun cg/bibtex-next-entry ()
     "Move to next @ at beginning of line"
     (interactive)
     (search-forward-regexp "^@"))
  (defun cg/bibtex-previous-entry ()
     "Move to previous @ at beginning of line"
     (interactive)
     (search-backward-regexp "^@"))
  (define-key bibtex-mode-map (kbd "C-c C-n") 'cg/bibtex-next-entry)
  (define-key bibtex-mode-map (kbd "C-c C-p") 'cg/bibtex-previous-entry)
#+END_SRC

* settings from [[http://tincman.wordpress.com/2011/01/04/research-paper-management-with-emacs-org-mode-and-reftex/][research paper management with emacs]]
#+BEGIN_SRC emacs-lisp :tangle no
(setq org-link-abbrev-alist
      '(("bib" . "~/literature/refs.bib::%s")
	("notes" . "~/literature/org/notes.org::#%s")
	("papers" . "~/literature/papers/%s.pdf")))


(defun org-mode-reftex-search ()
  ;;jump to the notes for the paper pointed to at from reftex search
  (interactive)
  (org-open-link-from-string (format "[[notes:%s]]" (reftex-citation t))))

(defun org-mode-reftex-setup ()
  (load-library "reftex")
  (and (buffer-file-name) (file-exists-p (buffer-file-name))
       (progn
	 ;enable auto-revert-mode to update reftex when bibtex file changes on disk
	 (global-auto-revert-mode t) 
	 (reftex-parse-all)
	 ;add a custom reftex cite format to insert links
	 (reftex-set-cite-format
	  '((?b . "[[bib:%l][%l-bib]]")
	    (?n . "[[notes:%l][%l-notes]]")
	    (?p . "[[papers:%l][%l-paper]]")
	    (?t . "%t")
	    (?h . "** %t\n:PROPERTIES:\n:Custom_ID: %l\n:END:\n[[papers:%l][%l-paper]]")))))
  (define-key org-mode-map (kbd "C-c )") 'reftex-citation)
  (define-key org-mode-map (kbd "C-c (") 'org-mode-reftex-search))

(add-hook 'org-mode-hook 'org-mode-reftex-setup)
#+END_SRC

* LaTeX Mode
If latex is not accessed through org-mode, I want to enable pdf-mode
on startup.
#+BEGIN_SRC emacs-lisp
  (add-hook 'latex-mode-hook 'TeX-PDF-mode)
  (add-hook 'LaTeX-mode-hook 'TeX-PDF-mode)
#+END_SRC
