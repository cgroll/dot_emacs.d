#+TITLE: Initialization of org-mode settings
#+OPTIONS: ^:nil
#+STARTUP: CONTENTS
#+BEGIN_COMMENT
Options: ^:nil avoids automatic subindex interpretation of
underscores.
#+END_COMMENT

* Set global key bindings
At first, we want to set the most important key bindings.
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
(define-key org-mode-map (kbd "C-7 C-7") 'next-error)
#+END_SRC

* Org-mode file formats
Automatically use org-mode for .org files, .txt files and org_archive
files.
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode)) 
#+END_SRC

* Org task manager                                                      :gtd:
This chapter determines all customized settings for using org-mode as
task planer. The settings are chosen in compliance with the Getting
things done methodology.

** Determine files for org agenda
First, we have to define which files to use when searching for tasks.
In this setting, all paths in the /~/org/ directory are on the path
list, and the file used as inbox bucket for captured notes is set to
/~/org/refile.org/. In order to synchronize these files privately
over multiple computers, the complete /~/org/ directory is only a
symbolic link to a folder stored in my dropbox.
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files (quote ("~/org/todo.org" "~/org/refile.org" 
                                   "~/comp_science/emacs_notes.org"
                                   "~/Dropbox/knowledge_base/oracle.org"
                                   "~/Dropbox/literature/management/literature_db.org")))
  ;;  (setq org-default-notes-file "~/org/refile.org") 
#+END_SRC
** Determine files for notes captured by org-mode
In addition to all files regarding my daily tasks and appointments, I
also use org-mode to capture short notes about things I read.
Especially, I collect short information about software and coding
tricks that I stumble upon, and capture them in my computational
science directory /~/comp_science/, where plain text files with notes
regarding to all different topics are stored. These files again are
publicly available through at git repository stored at github. So far,
my notes files are:
- bash_notes.org :: contains notes on bash programming and all
                    important commands for the linux shell
- emacs_notes.org :: notes about emacs installation procedures, as
     well as installation procedures for all emacs extensions. Also,
     the structure of my emacs configuration is explained, together
     with descriptions on keeping my emacsen as git repository for
     simple syncronization between multiple computers.
- git_notes.org :: notes on subversion control with git and github
                   (which is also how I backup my emacs system
                   settings publicly).
- gtd_notes.org :: more elaborate description of the structure and
                   possibilities of the org task managing features.
                   gtd refers to "Getting things done", which is a
                   book regarding a detailled task management
                   procedure.
- e_lisp_notes.org :: notes on emacs lisp
- e_wanderlust_notes.org :: wanderlust email notes
- e_bbdb_notes.org :: using big brother database
- R_notes.org :: notes on statistical computing with R
- matlab_notes.org :: notes on using matlab
- julia_notes.org :: notes on using julia language
- literature_notes.org :: notes on digital literature management -
     comprises mendeleydesktop, JabRef, Citavi, etc.
- e_latex_notes.org :: notes on latex, with focus on latex in emacs

The respective public git-repo should be easily forked, so that everybody can
extend it with private notes.

*Remark: all these files shall be available publicly, so that none of them may
contain any sensitive private data!!*

** Todo states                                                         :todo:
I keep the following todo states:
- TODO :: every individual task generally gets a TODO mark
- NEXT :: if any higher-level task or project brings forth any
          subtask, then this is marked as NEXT. This way I shift tasks
          from my external projects to my agenda, without immediately
          integrating the complete major project. Furthermore,
          long-term targets are forced to be splitted into minor
          tasks, which are much better to focus on.
- DONE :: the classic label for finished tasks
- WAITING :: if a task is still prevailing, but can not be processed
             right now since it depends on someone else's action.
             Could be used to indicate some chronological temporal
             dependency on a different task. However, chronological
             ordering at best should be implemented directly.
- CANCELLED :: any task that suddenly is not required anymore
- SOMEDAYS :: captures any unconcrete long-term targets or just things
              that probably would be nice to having it doing
*** State definitions
Entering any todo state automatically will create a timestamp. While
the timestamp for TODO and NEXT will be made at its creation, all
other states are told to log the entry time with a "!" sign in the
state definition. Additionally, WAITING and CANCELLED will call for a
note, so that an explanation can be added. Also, most states will log
exiting times as well. Fast access for todo states are guaranteed with
shortcut letters for each state, which also have to be enabled:
#+BEGIN_SRC emacs-lisp
  (setq org-use-fast-todo-selection t)
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords
     (quote ((sequence "HABIT(h)" "TODO(t)" "NEXT(n)" "STEADY(a)" "|" "DONE(d!/!)")
               (sequence "WAITING(w@/!)" "|" "CANCELLED(c@/!)" "SOMEDAY(s!/!)" "PROJECT(p)"))))
#+END_SRC
Here I determine custom face colors for my task state keywords.
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keyword-faces
     (quote (("TODO" :foreground "red" :weight bold)
               ("NEXT" :foreground "blue" :weight bold)
               ("HABIT" :foreground "deep pink" :weight bold)
               ("STEADY" :foreground "yellow")
               ("DONE" :foreground "forest green" :weight bold)
               ("WAITING" :foreground "orange" :weight bold)
               ("PROJECT" :foreground "yellow" :weight bold)
               ("SOMEDAY" :foreground "spring green" :weight bold)
               ("CANCELLED" :foreground "sea green" :weight bold))))
#+END_SRC
When skipping through todo states for minor corrections with shift
key, log processing will be disabled. Otherwise we will get to many
timestamps.
#+BEGIN_SRC emacs-lisp
  (setq org-treat-S-cursor-todo-selection-as-state-change nil)
#+END_SRC

** Org-capture                                                      :capture:
The process of capturing tasks and notes is probably one of the most
important parts of the complete system. It is absolutely crucial to
the system that any information can be temporarily captured and shoved
away fast and without disturbing the current workflow. That means,
with very few shortcuts any information can be captured in a highly
adapted template tailored to the specific information requirements. At
a header level, information is classified as one of several main
topics:
- TODO task
- email response
- event, appointment, date
- note
At the second layer, more specific patterns are distinguished, like
storage location, prompts, tags and the like.
*** Capturing tasks
#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
        (quote (
                  ("t" "TASK templates")
                  
                  ; TODO entry, inactive timestamp, heading needs to be inserted, manual scheduling
                  ("tt" "task, manual scheduling"
                     entry (file+headline "~/org/refile.org" "tasks")
                     "* TODO %? \nAdded: %U\n"
                      :clock-resume t) 
                  
                  ;; TODO entry, inactive timestamp, prompt for tag, heading needs to be inserted 
                  ("tT" "task, tag prompt"
                     entry (file+headline "~/org/refile.org" "tasks")
                     "* TODO %? %^G \nAdded: %U\n"
                      :clock-resume t)
  
                  ;; Checklist entries to steady challenges
                  ("tc" "checkitem: COMPUTER improvements"
                     checkitem (file+olp "~/org/todo.org"
                     "Computational science" "Computer improvements")
                     " [ ] %?")
  
                  ("te" "checkitem: EMACS improvements"
                     checkitem (file+olp "~/org/todo.org"
                     "Computational science" "Emacs improvements")
                     " [ ] %?")
  
                  ("tk" "checkitem: KNOWLEDGE improvements"
                     checkitem (file+olp "~/org/todo.org"
                     "Education" "Knowledge improvements")
                     " [ ] %?") 
    
                  ;; TODO entry, active timestamp, prompt for yanking
                  ("ty" "task with yanking" entry (file+headline
                  "~/org/refile.org" "tasks") 
                     "* TODO %? %^G \nSCHEDULED: %t \n%^C\nAdded: %U\n"
                      :clock-resume t)
                  
                  ;; TODO entry, active timestamp, prompt for tag and clipboard entry
                  ("tY" "task with tag and yanking"
                     entry (file+headline "~/org/refile.org" "tasks")
                     "* TODO %? %^G \nSCHEDULED: %t \n%^C\nAdded: %U\n"
                      :clock-resume t)
                  
                  ;; New research project: create project heading in todo.org under research projects
                  ;; includes: link to file, timestamp, prompt for project tag as property %^{TAGS}p
                                          ; project related tasks with link to origin
                  ("tP" "project with tag, automatic source"
                     entry (file+headline "~/org/todo.org" "Research")
                     "* NEXT %? :%^{TAG?}: \nSCHEDULED: %t\n%a\nAdded: %U\n "
                      :clock-resume t)
  
                  
                  ("tp" "project task"
                     entry (file+headline "~/org/todo.org" "Research")
                     "* NEXT %? :%^{TAG?}: \nSCHEDULED: %t\nAdded: %U\n "
                      :clock-resume t)         
                  ;; write function to shift todo tasks from project file to agenda ! 
                  
                  ("r" "EMAIL response"
                     entry (file+headline "~/org/refile.org" "tasks")
                     "* TODO Respond to %:from on %:subject :EMAIL:\n%a\n"
                      :clock-resume t :immediate-finish t
                     )
                  
                  ("h" "HABIT"
                     entry (file+headline "~/org/refile.org" "tasks")
                     "* HABIT %?\n%U\nSCHEDULED: %t .+1d/3d\n
  :PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: HABIT\n:END:\n")
  
                  )
           )
     )
#+END_SRC

*** Capturing events
#+BEGIN_SRC emacs-lisp
    (setq org-capture-templates  
  (append org-capture-templates
       (quote (
                 ("e" "EVENT templates")
                 
                 ;; Future event: prompt for date without time
                 ("ee" "daily event without time"
                 entry (file+headline "~/org/refile.org" "tasks")
                    "* %? :calendar: \n%^{Which date?}t \nAdded:%U\n"
                     :clock-resume t)
                 
                 ;; Future event: prompt for date WITH time
                 ("et" "event with time specification"
                 entry (file+headline "~/org/refile.org" "tasks")
                    "* %? :calendar: \n%^{Which date and time?}T \nAdded: %U\n"
                     :clock-resume t)
    
                 ;; Future event lasting for multiple days
                 ("ed" "enduring event"
                 entry (file+headline "~/org/refile.org" "tasks")
                    "* %? :calendar: \n%^{Starting time?}T--%^{Ending time?}T \nAdded: %U\n"
                     :clock-resume t)
  
                 ;; Entry in tracking file
                 ("eh" "tracking history event"
                 entry (file+datetree "~/org/tracker.org")
                      "* %^{Activity?|haircut|handy_charge|dentist|grandparents} %?"
                       :clock-resume t)
  
                 ;; Birthday entry into anniversaries calendar with prompt
                 ;; for date; date is active -> appears in agenda
                 ("ea" "annually repeating event"
                 plain (file+headline "~/org/todo.org" "Anniversaries")
                    "(org-anniversary %?) %^{Which event? Also, add %% in front} %d"
                     :clock-resume t)
                 
                 ;; Entry in log: at current time finished activity with completion
                 ("el" "logbook: finished activities"
                 entry (file+datetree "~/org/log.org")
                    "* %U - %^{Activity?|lunch|break|buy|program|read|work|research|torture} "
                     :clock-resume t)
                 
                 ;; Stopwatch activity without prompt
                 ("es" "stopwatch"
                 entry (file+datetree "~/org/log.org")
                    "* Stopwatch %? \nStarted: %U\n"
                     :clock-resume t)
                 
                 ;; Entry in creditcard with prompt for sum and cursor for item specification
                 ("ec" "credit-card info"
                 entry (file+datetree "~/org/creditcard.org")
                    "* %? - %^{Amount?} \nAdded: %U\n"
                     :clock-resume t)
                 
                 )
          )
       )
  )

#+END_SRC

;; Capture templates for: TODO tasks, Notes, appointments, phone
calls, and org-protocol
*** Capturing desired products
#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates  
(append org-capture-templates
     (quote (
               ("b" "BUY templates")
    
               ;; append to shop list
               ("bs" "product from SHOP"
                  checkitem (file+olp "~/org/todo.org" "Buy" "Shop")
                  " [ ] %? ") 
    
               ;; append to mall list
               ("bm" "product from MALL"
                  checkitem (file+olp "~/org/todo.org" "Buy" "Mall")
                  " [ ] %? ") 
    
               ;; append to regular list
               ("br" "REGULAR product"
                  checkitem (file+olp "~/org/todo.org" "Buy" "Regulars")
                  " [ ] %? ") 
      
               )
        )
     )
)
#+END_SRC
*** Capturing notes
Plain notes without any code, yanking or source file link.
#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
       (append org-capture-templates
          (quote (
                    ;; notes without code or yanking
                    ;("n" "Plain notes without code or yanking")
    
                    ;; git-note
                    ("n" "plain note"
                       entry (file+headline "~/org/refile.org" "notes")
                       "* %? ")
  
                    ("N" "note with yanking"
                       entry (file+headline "~/org/refile.org" "notes")
                       "* %? \n%^C")
  
                    
                    ("o" "note with origin and yanking"
                       entry (file+headline "~/org/refile.org" "notes")
                       "* %? \nFrom: %A\n%^C")
  
                    ("s" "shortcut"
                         table-line (file+headline "~/org/refile.org" "shortcuts")
                         "| %? | |")
                    
                    ("S" "shortcut with yanking"
                         table-line (file+headline "~/org/refile.org" "shortcuts")
                         "| ^C | |")
    
                    )
             )
          )
)
    
#+END_SRC
Notes with code snippet in clipboard or kill ring, and source file link.
#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates       
(append org-capture-templates
          (quote (
                    ;; code yanking
                    ("c" "note with code"
                       entry (file+headline "~/org/refile.org" "notes")
                       "* %? \n#+begin_src
                    %^{Language?|emacs-lisp|sh|matlab|r|julia} \n%^C\n#+end_src \n")
  
                    ;; code yanking with source recording for w3m
                    ("w" "note with code, source "
                       entry (file+headline "~/org/refile.org" "notes")
                       "* %? \n#+begin_src
                    %^{Language?|emacs-lisp|sh|matlab|r|julia} \n%^C\n#+end_src \n%a\n")
             )
          )
       )
)      
#+END_SRC
Additional notes to store:
- emacs command / with shortcut / explanation
- track things:
  - vacation days / costs
  - handy balance
- registration / password
*** Capturing present ideas
#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
     (append org-capture-templates
        (quote (
                  ("p" "PRESENT idea"
                     checkitem
                     (file+headline "~/org/todo.org" "Presents")
                     " [ ] %? " :prepend)
                  )
           )
        )
     )
  
#+END_SRC
*** Refile targets
#+BEGIN_SRC emacs-lisp  
(setq org-refile-use-outline-path t)
  (setq org-refile-use-outline-path 'file)
  (setq org-outline-path-complete-in-steps t)
  (setq org-refile-allow-creating-parent-nodes (quote confirm))
  ;; (setq org-completion-use-ido t)
  ;; (setq ido-everywhere t)
  ;; (setq ido-max-directory-size 100000)
  ;; (ido-mode (quote both))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; (setq org-refile-targets
  ;;    (quote
  ;;       (("~/comp_science/bash_notes.org" :maxlevel . 4)
  ;;          ;;(nil :maxlevel . 3)          
  ;;          ;;(org-agenda-files :maxlevel . 4)
  
  ;;          ("~/comp_science/e_auto-complete_notes.org" :maxlevel . 4)         
  ;;          ("~/comp_science/emacs_notes.org" :maxlevel . 4)
  ;;                   
  ;;          
  ;;          
  ;;          )
  ;;       )
  ;;    )
  
  
  ;; refile targets
  (setq org-refile-targets
     (quote
        (("~/org/todo.org" :maxlevel . 1)
           ("~/org/log.org" :maxlevel . 1)
           ("~/org/creditcard.org" :maxlevel . 1)
           ("~/comp_science/e_auto-complete_notes.org" :maxlevel . 3)
           ("~/comp_science/emacs_notes.org" :maxlevel . 3)
           ("~/comp_science/git_notes.org" :maxlevel . 3)
           ("~/comp_science/gtd_notes.org" :maxlevel . 3)
           ("~/literature/management/literature_db.org" :maxlevel . 3)
           ("~/comp_science/ubuntu_notes.org" :maxlevel . 3)
           ("~/org/annuals.org" :maxlevel . 1))))
  ;; (defun cg/org-refile ()
  ;;    (interactive)
  ;;    (add-file-local-variable 'org-refile-targets t)
  ;;    (setq org-refile-targets
  ;;       (quote
  ;;          (("~/org/todo.org" :maxlevel . 1)
  ;;             ("~/org/log.org" :maxlevel . 1)
  ;;             ("~/org/creditcard.org" :maxlevel . 1)
  ;;             ("~/org/annuals.org" :maxlevel . 1))))
  ;;    )
#+END_SRC

** Push line to agenda
Here I want to enable an easy way to push any header, plain list item
or checkbox item as a NEXT task to the agenda. Reason for this is
that a do not want to scan all individual project files directly for
tasks each time I evaluate the agenda. Furthermore, I have large
lists of things that I want to perform anywhere in the future, and
these lists shall not appear in the agenda itself. Only individual
entries of these lists shall become present temporarily.

First, I need a lisp-function that will push point to any given line
of text in any arbitrary file. Of course, the text line only can be
specified through its content, since line numbers will change
steadily. Hence, I will use search commands.
#+BEGIN_SRC emacs-lisp  
    (defun cg/move-to-file-and-content (file text)
       "function performs search for TEXT in FILE"
       (push-mark)
       ;; open file
       (find-file file)
       ;; go to result of search for content
    
       (goto-char (point-min))
       (goto-char
          (search-forward text)
          )
       )
    
    (defun cg/push-as-next-to-agenda ()
       "create NEXT task from current line"
       (interactive)
       (let (text_content beg_line beg_content end_line file_name
               link_part complete_link)
          (save-excursion
             ;; get line begin
             (move-beginning-of-line nil)
             (setq beg_line (point))
    
             ;; get content begin
             (search-forward-regexp "[a-zA-Z0-9]")
             (backward-char)
             (setq beg_content (point))
    
             ;; get line end
             (move-end-of-line nil)
             (setq end_line (point))
    
             ;; get content
             (setq text_content
                (buffer-substring beg_content end_line)
                )
    
             ;;  get file
             (setq file_name (buffer-file-name))
    
             ;; create link
             (setq link_part
                (concat "elisp:(cg/move-to-file-and-content \"" file_name "\" \"" text_content "\")")
                )
    
             (setq complete_link
                (concat "* NEXT [["link_part"]["text_content"]]")
                )
    
             ;; create entry at end of file
             (end-of-buffer)
             (newline)
             (insert complete_link)
  
             (org-refile)
             )
                                
          )
       
       )
#+END_SRC

** Org-agenda                                                        :agenda:
Set number of days ahead shown in agenda view:
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-span 8)
#+END_SRC
Restore window settings as they were before the call of org-agenda.
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-restore-windows-after-quit t)
#+END_SRC
Treat any tasks with associated timestamp as irrelevant for todo-list.
#+BEGIN_SRC emacs-lisp  
  (setq org-agenda-todo-ignore-scheduled t)
  (setq org-agenda-todo-ignore-deadlines t)
  (setq org-agenda-todo-ignore-timestamp 'all)
#+END_SRC
Set order in agenda views.
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-sorting-strategy 
     '(
         (agenda time-up  todo-state-up habit-up category-keep)
         (todo priority-down todo-state-up category-keep)
         )
     )
#+END_SRC
Show clock-report per default.
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-start-with-clockreport-mode t)
#+END_SRC
Determine additional files for text search.
#+BEGIN_SRC emacs-lisp  
  (setq org-agenda-text-search-extra-files
     '("~/Dropbox/knowledge_base/oracle.org"
         "~/comp_science/git_notes.org"
         "~/comp_science/ssh_notes.org"
"~/comp_science/bash_notes.org"
"~/comp_science/gtd_notes.org"
"~/comp_science/emacs_notes.org"
"~/comp_science/ubuntu_notes.org"
"~/.emacs.d/init-org.org"))
#+END_SRC
Customized searches:
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-custom-commands
     '(
         ("k" "agenda and todo-list"
            ((todo "")
            (agenda "")))
         ("o" tags-tree "+vip+documentation")
         )
     )
#+END_SRC
Stuck projects:
#+BEGIN_SRC emacs-lisp
  (setq org-stuck-projects
     '("-ANY/+PROJECT|SOMEDAY" ("NEXT" "TODO"))
     )
#+END_SRC
** OrgMobile
#+BEGIN_SRC emacs-lisp
  (setq org-mobile-directory "~/Dropbox/MobileOrg")
#+END_SRC

** Customize variables
#+BEGIN_SRC emacs-lisp
  (custom-set-variables
     '(org-deadline-warning-days 14)
     '(org-agenda-show-all-dates t)
     '(org-clock-into-drawer t)
     '(org-agenda-skip-deadline-if-done t)
     '(org-agenda-skip-scheduled-if-done t)
     '(org-agenda-start-on-weekday nil) ; start agenda at current day
     '(org-reverse-note-order nil) ; append new nodes
     '(org-fast-tag-selection-single-key nil) ; you have to press RET to
                                          ; exit tag menu
     '(calendar-longitude 11.580) ; Munich coordinates to get sunrise
                                  ; /sunset times
     '(calendar-latitude 48.139)
     )
  (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
         (latex . t)
         (sh . t)
         (R . t)))
  
#+END_SRC
(org-agenda-custom-commands
   (quote (("d" todo "DELEGATED" nil)
       ("c" todo "DONE|DEFERRED|CANCELLED" nil)
       ("w" todo "WAITING" nil)
       ("W" agenda "" ((org-agenda-span 21)))
       ("A" agenda ""
        ((org-agenda-skip-function
          (lambda nil
        (org-agenda-skip-entry-if (quote notregexp) "\\=.*\\[#A\\]")))
         (org-agenda-ndays 1)
         (org-agenda-overriding-header "Today's Priority #A tasks: ")))
       ("u" alltodo ""
        ((org-agenda-skip-function
          (lambda nil
        (org-agenda-skip-entry-if (quote scheduled) (quote deadline)
                      (quote regexp) "\n]+>")))
         (org-agenda-overriding-header "Unscheduled TODO entries: ")))))
<<<<<<< HEAD

* Org babel                                                           :babel:
http://nakkaya.com/2010/09/07/writing-papers-using-org-mode/

Disable confirmation query for code evaluation and evaluation on export.
#+BEGIN_SRC emacs-lisp
  (setq org-confirm-babel-evaluate nil)
  (setq org-export-babel-evaluate nil)
#+END_SRC

Load languages.
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
      'org-babel-load-languages
      '((emacs-lisp . nil)
          (R . t)
          (matlab . t)
          (sh . t)))
#+END_SRC

Open edit-src-block in same window.
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC
Show source-blocks in native faces
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC
** source code templates
#+BEGIN_SRC emacs-lisp
  (defun cg/insert-source-code (language name)
     "interactively specify language, name and picture properties of
  source code block"
     (interactive "sSpecify language: \nsName of source block: ")
     (let (src_str)
        (setq src_str (concat "#+name: " name "\n"))
        (if (y-or-n-p "Include picture?")
           (progn
              (setq src_str (concat src_str "#+BEGIN_SRC " language
                               " :results graphics :file ./pics/" name
                               ".pdf\n")) 
              (setq src_str (concat src_str "\n#+END_SRC\n\n"))
              (setq src_str (concat src_str "#+attr_latex:"
                               " width=0.8\\textwidth,placement=[h!]\n"))
              (setq src_str (concat src_str "#+label: fig:\n"))
              (setq src_str (concat src_str "#+caption: \n"))
              (setq src_str (concat src_str "#+RESULTS: " name "\n"))
              )
           (setq src_str (concat src_str "#+BEGIN_SRC " language "\n\n"))
           (setq src_str (concat src_str "#+END_SRC"))
           )
        (insert src_str)
        )
     )
  
  (global-set-key (kbd "C-3") 'cg/insert-source-code)
  
  
#+END_SRC
* Org tex-commands                                                    :latex:
Since all my scientific publications are written in org-babel, I
often have to include tex-commands even in org-mode for inline
mathematical formulas. Hence, Greek letters, sub- and super-indices
and basic mathematical operators should be easily accessible. Only
environmental commands are not required here.

** Greek letters 
Greek letters shall be set in compliance with auctex.
Lowercase Greek letters.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-g a")
     '(lambda () (interactive) (insert "\\alpha")))
  (global-set-key (kbd "M-g b")
     '(lambda () (interactive) (insert "\\beta")))
  (global-set-key (kbd "M-g g")
     '(lambda () (interactive) (insert "\\gamma")))
  (global-set-key (kbd "M-g d")
     '(lambda () (interactive) (insert "\\gamma")))
  (global-set-key (kbd "M-g e")
     '(lambda () (interactive) (insert "\\epsilon")))
  (global-set-key (kbd "M-g z")
     '(lambda () (interactive) (insert "\\zeta")))
  (global-set-key (kbd "M-g h")
     '(lambda () (interactive) (insert "\\eta")))
  (global-set-key (kbd "M-g j")
     '(lambda () (interactive) (insert "\\theta")))
  (global-set-key (kbd "M-g k")
     '(lambda () (interactive) (insert "\\kappa")))
  (global-set-key (kbd "M-g l")
     '(lambda () (interactive) (insert "\\lambda")))
  (global-set-key (kbd "M-g m")
     '(lambda () (interactive) (insert "\\mu")))
  (global-set-key (kbd "M-g n")
     '(lambda () (interactive) (insert "\\nu")))
  (global-set-key (kbd "M-g x")
     '(lambda () (interactive) (insert "\\xi")))
  (global-set-key (kbd "M-g p")
     '(lambda () (interactive) (insert "\\pi")))
  (global-set-key (kbd "M-g r")
     '(lambda () (interactive) (insert "\\rho")))
  (global-set-key (kbd "M-g s")
     '(lambda () (interactive) (insert "\\sigma")))
  (global-set-key (kbd "M-g t")
     '(lambda () (interactive) (insert "\\tau")))
  (global-set-key (kbd "M-g u")
     '(lambda () (interactive) (insert "\\upsilon")))
  (global-set-key (kbd "M-g f")
     '(lambda () (interactive) (insert "\\phi")))
  (global-set-key (kbd "M-g q")
     '(lambda () (interactive) (insert "\\chi")))
  (global-set-key (kbd "M-g y")
     '(lambda () (interactive) (insert "\\psi")))
  (global-set-key (kbd "M-g w")
     '(lambda () (interactive) (insert "\\omega")))
  (global-set-key (kbd "M-g v e")
     '(lambda () (interactive) (insert "\\varepsilon")))
  (global-set-key (kbd "M-g v j")
     '(lambda () (interactive) (insert "\\vartheta")))
  (global-set-key (kbd "M-g v p")
     '(lambda () (interactive) (insert "\\varpi")))
  (global-set-key (kbd "M-g v r")
     '(lambda () (interactive) (insert "\\varrho")))
  (global-set-key (kbd "M-g v s")
     '(lambda () (interactive) (insert "\\varsigma")))
  (global-set-key (kbd "M-g v f")
     '(lambda () (interactive) (insert "\\varphi")))
#+END_SRC
Greek uppercase letters.
#+BEGIN_SRC emacs-lisp  
  (global-set-key (kbd "M-g G")
       '(lambda () (interactive) (insert "\\Gamma")))
  (global-set-key (kbd "M-g D")
       '(lambda () (interactive) (insert "\\Delta")))
  (global-set-key (kbd "M-g J")
       '(lambda () (interactive) (insert "\\Theta")))
  (global-set-key (kbd "M-g L")
       '(lambda () (interactive) (insert "\\Lambda")))
  (global-set-key (kbd "M-g X")
       '(lambda () (interactive) (insert "\\Xi")))
  (global-set-key (kbd "M-g P")
       '(lambda () (interactive) (insert "\\Pi")))
  (global-set-key (kbd "M-g S")
       '(lambda () (interactive) (insert "\\Sigma")))
  (global-set-key (kbd "M-g U")
       '(lambda () (interactive) (insert "\\Upsilon")))
  (global-set-key (kbd "M-g F")
       '(lambda () (interactive) (insert "\\Phi")))
  (global-set-key (kbd "M-g Y")
       '(lambda () (interactive) (insert "\\Psi")))
  (global-set-key (kbd "M-g W")
       '(lambda () (interactive) (insert "\\Omega")))
#+END_SRC

** Math-mode



