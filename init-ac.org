#+TITLE: Initialization of auto-complete.el settings

The general idea of auto-complete-mode is to provide both static as
well as dynamic completion on the fly, listed in a small pop-up
window if first guess should not be accurate.

Thereby static completion consists of unchanging word lists, while
dynamic completion relies on other functions to come up with lists
depending on content and environment. For example, auto-complete-mode
allows completion of file names, which are different on each computer
and evolving through time. 

Despite being unchangeable itself, whether specific file lists are
used or not can be determined dynamically nevertheless. That is,
depending on the currently used major-mode, either word lists with
Latex-specific or C-language words can be used.

Auto-completion-mode handles these separate ways of static and
content-specific word lists as sources. For example, one source for
completion could be file names, while another source for completion
would be all words in the current buffer.

One now can either define a default set of possible ac-sources which
will be used for all buffers, or render actually used ac-sources
conditional on the major-mode of buffers. It seems, however, that you
have to be very cautious not to specify any default settings if you
want to take the more individualistic route, because any
customizations would be overwritten otherwise.

* Description of sources
Some words on the sources I use, as well as their intended scope.

ac-source-filename provides completion of file names. This is useful
for nearly every major-mode, as it is quite commonly required to link
to other files.

ac-source-functions, ac-source-variables and ac-source-symbols
provide completion of emacs-lisp context. While very much
appreciated in emacs-lisp-mode buffers, it also becomes necessary for
example in org-mode buffers with emacs-lisp source blocks and for
operations like buffer-file-name, org-table, ...

ac-source-semantic should provide completion of files in context.
That is, functions relied on, other functions in project,... However,
it only works in combination with cedet, which is mainly designed for
famous machine code languages like C++, java,...

ac-source-dictionary is a list of user-defined words. I use this
variable to provide me with completion to the most frequently
appearing words of the English language with more than 3 letters. In
detail, this source consists of two parts: some word lists defined
in ac-user-dictionary-files, which will be used throughout all modes,
(this could be email addresses, English words), and a folder
ac-dictionary-directories containing mode-specific word lists as well
as word lists for individual file extensions (.txt files, .org files).

ac-source-etags is another way to provide completion based on content
functions. For example, you want to have auto-completion to all your
matlab functions in a given project directory. This is a very
convenient feature for statistical programming, as you can give
self-explanatory names to your functions (e.g.
fitBivCopUnderGaussianAssum) without unbearably increasing typing
effort. This feature will be explained in more detail below, as it
relies on the creation of etags for your project directories, which
is not completely trivial. Also, you must specify a tags table,
otherwise ac-source-etags will throw an error.

Additional sources can be found at
http://emacswiki.org/AutoCompleteSources. 

* Implementation of word-lists
** Set paths 
At first, we will have to make sure that all files installed are
found by emacs and are loaded at startup.

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/extensions/auto-complete")
(add-to-list 'load-path "~/.emacs.d/extensions")
(require 'ac-math)
(require 'auto-complete-etags)
(require 'auto-complete-config)
#+END_SRC

** Initialization of static word lists 
Syntax should be (setq ac-user-dictionary-files '("fileA" "fileB")).
#+BEGIN_SRC emacs-lisp
(setq ac-user-dictionary-files '("~/.emacs.d/extensions/auto-complete_own_words/own_word_list"))
(setq ac-dictionary-files
     '("~/.emacs.d/extensions/auto-complete/dict/"))
#+END_SRC


** Set active completion modes
This will set default ac-sources valid for all buffers. One could
easily define differing settings for individual modes. This way, one
only needs to define a function loading the respective ac-sources and
add it as hook to the respective mode. 
#+BEGIN_SRC emacs-lisp
  (setq-default ac-sources '(ac-source-filename
                               ;; ac-source-features
                               ac-source-functions
                               ac-source-variables
                               ac-source-symbols
                               ;; ac-source-abbrev
                               ac-source-dictionary
                               ac-source-words-in-same-mode-buffers
                               ;; ac-source-semantic
                               ac-source-latex-commands
                               ac-source-math-latex
                               ac-source-etags
                               ac-source-math-unicode))
#+END_SRC


** Enable language switching
Enable language switching to german, mainly for answering of german
emails. Actually, instead of two separate functions, in the future I will
implement one function that simply switches between both languages.

In order to come up with new word lists, one just has to copy some arbitrary
list of words separated with newline into a plain text file. However, in order
to avoid completion of words with less than 4 letters, all short words should
be deleted upfront. This can be done by search for regexp ^.\{1,4\}$
#+BEGIN_SRC emacs-lisp
  (defun cg/ac_toggle_language_german ()
    "Switch autocompletion language to german"
    (interactive)
    (setq ac-user-dictionary-files '("~/.emacs.d/extensions/auto-complete/dict/german_words"))
    (ac-clear-dictionary-cache)
  )
  
  (defun cg/ac_toggle_language_english ()
    "Switch autocompletion language to english"
    (interactive)
    (setq ac-user-dictionary-files '("~/.emacs.d/extensions/auto-complete/dict/own_word_list"))
    (ac-clear-dictionary-cache)
  )
#+END_SRC

* Configuration
Start auto-completion automatically at start-up, and differentiate between lower and upper case letters.
#+BEGIN_SRC emacs-lisp
(auto-complete-mode t)
(setq ac-ignore-case nil)		; do not ignore cases
#+END_SRC

** Key settings
Main trigger key is combination is C-i, so that TAB key is less
effected. Also, specify abortion key.

Best configuration: use same key, to perform:
- expansion of shown word
- restart and move forward one proposed completion
#+BEGIN_SRC emacs-lisp :tangle no
(ac-set-trigger-key "C-o")
(global-set-key (kbd "C-o") 'ac-expand)	; use C-j as trigger key / problem with new line?
(define-key ac-completing-map "\M-/" 'ac-stop) ; undo completion
(define-key ac-mode-map (kbd "C-o") 'auto-complete) ; restart ac-mode
(define-key ac-mode-map (kbd "C-o") 'ac-complete) ; restart ac-mode


(global-set-key (kbd "C-o") 'auto-complete)
(global-set-key (kbd "C-o") 'ac-expand)
(ac-set-trigger-key "C-o")
(global-set-key (kbd "C-o") 'ac-complete)

#+END_SRC

** Menu settings
#+BEGIN_SRC emacs-lisp
(setq ac-auto-start 3)			; minimum number of typed characters to start
(setq ac-delay 0)			; delay time to start auto-completion
(setq ac-auto-show-menu 1.4)	        ; delay time to show menu
#+END_SRC
** Startup settings
Use auto-complete in nearly every mode.
#+BEGIN_SRC emacs-lisp
(add-to-list 'ac-modes 'text-mode)
(add-to-list 'ac-modes 'org-mode)
(add-to-list 'ac-modes 'fundamental-mode)
(add-to-list 'ac-modes 'matlab-mode)
(add-to-list 'ac-modes 'ess-mode)
(add-to-list 'ac-modes 'emacs-lisp-mode)
(add-to-list 'ac-modes 'LaTeX-mode)
(add-to-list 'ac-modes 'latex-mode)
(add-to-list 'ac-modes 'org-src-mode)
(add-to-list 'ac-modes 'LaTeX-math-mode)
(add-to-list 'ac-modes 'message-mode)
(global-auto-complete-mode t)
#+END_SRC














